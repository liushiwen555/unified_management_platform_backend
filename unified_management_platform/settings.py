"""
Django settings for unified_management_platform project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import logging

import environ
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from celery.schedules import crontab
from corsheaders.defaults import default_headers
from django.conf.global_settings import CSRF_TRUSTED_ORIGINS

root = environ.Path(__file__) - 2
env = environ.Env(DEBUG=(bool, False),)
PROJECT_ENV = env.str('PROJECT_ENV', '')
if env.str('PROJECT_ENV', '') == '':
    env.read_env(str(root.path('.envs').path('.dev')), HOME='xxxx')
else:
    env.read_env(str(root.path('.envs').path(PROJECT_ENV)))

BASE_DIR = root

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)
ALLOW_TEST_LOGIN = env.bool('ALLOW_TEST_LOGIN', False)
TEST = env.bool('TEST', False)
ENABLE_PERMISSION = True
# ENABLE_PERMISSION = False
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', [])


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    # 'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_yasg',
    'django_filters',
    'base_app.apps.BaseAppConfig',
    'firewall',
    'auditor.apps.AuditorConfig',
    'log',
    'user.apps.UserConfig',
    'setting',
    'unified_management_platform',
    'unified_log',
    'snmp',
    'statistic',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'utils.middlewares.SetRemoteAddressMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'utils.middlewares.CheckIPAndTimeoutMiddleware',
    'utils.middlewares.LogModelMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'unified_management_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'unified_management_platform.wsgi.application'
ASGI_APPLICATION = 'unified_management_platform.routing.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASE_URL = env.str('DATABASE_URL')
DATABASES = {
    'default': env.db()
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'utils.core.pagination.CustomPagination',
    'PAGE_SIZE': 12,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',
                                # 'rest_framework.filters.SearchFilter',
                                'rest_framework.filters.OrderingFilter'),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'utils.core.authentication.EncryptedTokenAuthentication',
    ),
    # 'DEFAUT_AUTHENTICATION_CLASSES': [] # 取消 Authtoken
    'EXCEPTION_HANDLER': 'utils.core.exceptions.custom_exception_handler'

}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = env.str('SERVER_STATIC_ROOT')
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

if DEBUG:
    MEDIA_ROOT = env.str('LOCAL_MEDIA_ROOT')
else:
    MEDIA_ROOT = env.str('SERVER_MEDIA_ROOT')

SERVER_PASS = env.str('SERVER_PASS')

# Enable CORS headers.
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = default_headers + ('MACHINE-PULL', )

CELERY_BROKER_URL = env.str('CELERY_BROKER_URL')

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = env.list('CELERY_ACCEPT_CONTENT')
CELERY_RESULT_BACKEND = env.str('CELERY_RESULT_BACKEND')
CELERY_TASK_SERIALIZER = env.str('CELERY_TASK_SERIALIZER')

MGMT = env.str('MGMT')
INTERFACES = env.list('INTERFACES')
ADMIN_DEFAULT_PASSWORD = env.str('ADMIN_DEFAULT_PASSWORD')

CELERY_BEAT_SCHEDULE = {
    'check_user_last_change_psw_task': {
        'task': 'log.tasks.check_user_pwd_modified',
        'schedule': crontab(minute=0, hour=0, day_of_week='0-6'),
    },
    'cpu_memory_alert_task': {
        'task': 'setting.tasks.cpu_memory_alert_task',
        'schedule': 5,
    }
}

# interface file path and nginx file path for set ip.
PORT=env.str('PORT')
DJANGO_IP_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'ip_settings.py')
# IFACE_FILE_DIR = '/etc/network/interfaces.d'
IFACE_FILE_DIR = '/etc/netplan'
IFACE_TEMPLATE = '''
network:
  version: 2
  renderer: networkd
  ethernets:
    {}:
      addresses: [{}]
      {}
      nameservers:
        addresses: [8.8.8.8, 8.8.7.7]
'''
# NGINX_FILE_PATH = '/etc/nginx/sites-available/auditor_v2.conf'
CERTIFICATE_DIR = '/etc/nginx/cert'

# rewrite ip_settings.py to set server ip.
try:
    from . import ip_settings
    ALLOWED_HOSTS.append(ip_settings.IP)
    CSRF_TRUSTED_ORIGINS.append('{}:{}'.format(ip_settings.IP, PORT))
except (ImportError, SyntaxError, AttributeError):
    pass

# the absolute path to preserve product info. file may seems like:
# [basic]
# model = BGA-R800
# serial_no = 18201001001
# version = V2.0
HOME = env.str('HOME')
PRODUCT_INFO_PATH = os.path.join(HOME, 'product-info')
AUDIT_SCHEME = env.str('AUDIT_SCHEME')
AUDIT_PORT = env.str('AUDIT_PORT')
FIREWALL_SCHEME = env.str('FIREWALL_SCHEME')
FIREWALL_PORT = env.str('FIREWALL_PORT')
FIREWALL_INLAY_USER = env.str('FIREWALL_INLAY_USER')
FIREWALL_INLAY_USER_PW = env.str('FIREWALL_INLAY_USER_PW')

# add swagger settings
from utils.custom_schema import YasgCustomViewSchema
SWAGGER_SETTINGS = {
    'DEFAULT_AUTO_SCHEMA_CLASS': YasgCustomViewSchema,
}

ELASTICSEARCH_HOST = env.str('ELASTICSEARCH_HOST')
KAFKA_BROKER = env.str('KAFKA_BROKER')
LOG_PARTITION = env.int('LOG_PARTITION', 4)    # 日志解析需要的partition数量

AUTH_USER_MODEL = 'user.User'
REDIS_URL = env.str('REDIS_URL')


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARN
)


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('localhost', '6379')],
            'capacity': 1500,
            'expiry': 10,
        },
    },
}